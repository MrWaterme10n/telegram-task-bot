from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup

user_state = {}  # —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìã –°–ø–∏—Å–æ–∫"],
        ["üóë –û—á–∏—Å—Ç–∏—Ç—å", "‚úÖ –ì–æ—Ç–æ–≤–æ"],
        ["#Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
    if user_state.get(user_id) == "adding":
        task_file = f"tasks_{user_id}.txt"
        with open(task_file, "a", encoding="utf-8") as file:
            file.write(text + "\n")
        user_state[user_id] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}")
        return
    if user_state.get(user_id) == "deleting":
        task_file = f"tasks_{user_id}.txt"
        try:
            with open(task_file, "r", encoding="utf-8") as file:
                tasks = file.readlines()
        except FileNotFoundError:
            tasks = []
        try:
            num = int(text)
            if num < 1 or num > len(tasks):
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            else:
                removed_task = tasks.pop(num - 1)
                with open(task_file, "w", encoding="utf-8") as file:
                    file.writelines(tasks)
                await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Ññ{num}: {removed_task.strip()}")
        except ValueError:
            await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")

        user_state[user_id] = None
        return

  

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìã –°–ø–∏—Å–æ–∫":
        await list_tasks(update, context)
    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å":
        await clear(update, context)
    elif text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        user_state[user_id] = "deleting"
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2)")
    elif text == "#Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á":
        await count(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        user_id = update.effective_user.id
        user_state[user_id] = "adding"
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É:")
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")



async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    task_file = f"tasks_{user_id}.txt"

    data = query.data  # –±—É–¥–µ—Ç –≤ –≤–∏–¥–µ "delete:1"
    if data.startswith("delete:"):
        index = int(data.split(":")[1])

        try:
            with open(task_file, "r", encoding="utf-8") as file:
                tasks = file.readlines()
        except FileNotFoundError:
            tasks = []

        if 0 <= index < len(tasks):
            removed_task = tasks.pop(index)
            with open(task_file, "w", encoding="utf-8") as file:
                file.writelines(tasks)

            await query.edit_message_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {removed_task.strip()}")
        else:
            await query.edit_message_text("–ó–∞–¥–∞—á–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")


# /add –∑–∞–¥–∞—á–∞
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = ' '.join(context.args)
    if not task:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add –ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É")
        return
    
    
    user_id = update.effective_user.id
    task_file = f"tasks_{user_id}.txt"

    with open(task_file, "a", encoding="utf-8") as file:
        file.write(task + "\n")
    await update.message.reply_text(f"–î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {task}")

# /list
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_file = f"tasks_{user_id}.txt"
    try:
        with open(task_file, "r", encoding="utf-8") as file:
            tasks = file.readlines()
    except FileNotFoundError:
        tasks = []

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        for i, task in enumerate(tasks):
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data=f"delete:{i}")
            ]])
            await update.message.reply_text(f"{i+1}. {task.strip()}", reply_markup=keyboard)

# /clear
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_file = f"tasks_{user_id}.txt"
    open(task_file, "w").close()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω.")


# /count
async def count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_file = f"tasks_{user_id}.txt"
    try:
        with open(task_file, "r", encoding="utf-8") as file:
            tasks = file.readlines()
        total = len(tasks)
        await update.message.reply_text(f"–£ —Ç–µ–±—è {total} –∑–∞–¥–∞—á(–∏).")
    except FileNotFoundError:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–∫–∞ –ø—É—Å—Ç.")


# /done
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_file = f"tasks_{user_id}.txt"
    try:
        with open(task_file, "r", encoding="utf-8") as file:
            tasks = file.readlines()
    except FileNotFoundError:
        tasks = []

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: \n/done 2")
            return
        try:   
            num = int(context.args[0])
            if num < 1 or num > len(tasks):
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
                return
            
            removed_task = tasks.pop(num - 1)

            with open(task_file, "w", encoding="utf-8") as file:
                file.writelines(tasks)

            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Ññ{num}: {removed_task.strip()}")
        except ValueError:
            await update.message.reply_text("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")


# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token("439615167:AAFyKrhGGd1BKPEtHUZu_WauDoRpObTyBTo").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("list", list_tasks))
app.add_handler(CommandHandler("clear", clear))
app.add_handler(CommandHandler("count", count))
app.add_handler(CommandHandler("done", done))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(CallbackQueryHandler(handle_delete_callback))

app.run_polling()